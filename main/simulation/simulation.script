local state = require("main.state.state")

local sqrt, floor, ceil = math.sqrt, math.floor, math.ceil
local WIDTH = 1031
local HEIGHT = 580

local function round(x)
  return x >= 0 and floor(x + 0.5) or ceil(x - 0.5)
end

local function atom(x, y, c)
  return {x = x, y = y, vx = 0, vy = 0, color = c, instance = nil}
end

local function randomxy()
	local x = round(math.random() * WIDTH - 5)
	local y = round(math.random() * HEIGHT - 5)

	return x, y
end

local function create(number, color)
  local group = {}

  for i = 1, number do
    local x, y = randomxy()

    table.insert(group, atom(x, y, color))
  end

  return group
end

local function rule(atoms1, atoms2, g)  
	for i = 1, #atoms1 do
		local fx = 0
		local fy = 0
		local a, b
	
		for j = 1, #atoms2 do
			a = atoms1[i]
			b = atoms2[j]
			local dx = a.x - b.x
			local dy = a.y - b.y
			local d = sqrt(dx * dx + dy * dy)
	
			if d > 0 and d < 80 then
			local F = g / d
	
			fx = fx + F * dx
			fy = fy + F * dy
			end
		end
	
		a.vx = (a.vx + fx) * 0.5
		a.vy = (a.vy + fy) * 0.5
		a.x = a.x + a.vx
		a.y = a.y + a.vy

		if a.x <= 0 or a.x >= WIDTH then
			a.vx = a.vx * -1
			
			if a.x <= 0 then
				a.x = 1
			elseif a.x >= WIDTH then
				a.x = WIDTH + 1
			end
		end
	
		if a.y <= 0 or a.y >= HEIGHT then
			a.vy = a.vy * -1

			if a.y <= 0 then
				a.y = 0
			elseif a.y >= HEIGHT then
				a.y = HEIGHT
			end
		end
	end
  end

local function render_atoms(self, number, color)
	local group = create(number, hash(color))
	
	local component = "#atom_factory"
	for i = 1, #group do
		local atom = factory.create(component, vmath.vector3(group[i].x, group[i].y, 0), nil, {color = group[i].color})
		group[i].instance = atom
	end

	self[color] = group
end

local function update_atoms_position(atom_group)
	for i = 1, #atom_group do
		go.set_position(vmath.vector3(atom_group[i].x, atom_group[i].y, 0), atom_group[i].instance)
	end
end

function init(self)
	print('STARTt')
	self.time = 0

	self.red = {}
	self.green = {}
	self.blue = {}

	render_atoms(self, state.ATOMS_COUNT.RED, "red")
	render_atoms(self, state.ATOMS_COUNT.GREEN, "green")
	render_atoms(self, state.ATOMS_COUNT.BLUE, "blue")
end

function final(self)
end

function update(self, dt)
	rule(self.green, self.green, -0.32)
	rule(self.green, self.red, -0.17)
	rule(self.green, self.blue, 0.34)
	rule(self.red, self.red, -0.1)
	rule(self.red, self.green, -0.34)
	rule(self.blue, self.blue, 0.15)
	rule(self.blue, self.green, -0.2)

	
	-- rule(self.red, self.red, 0.85)
	-- rule(self.red, self.blue, 0.07)
	-- rule(self.red, self.green, -0.12)
	-- rule(self.green, self.green, -0.3)
	-- rule(self.green, self.blue, 0.5)
	-- rule(self.green, self.red, -0.41)
	-- rule(self.blue, self.blue, 0.36)
	-- rule(self.blue, self.green, 0.97)
	-- rule(self.blue, self.red, -0.21)

	update_atoms_position(self.red)
	update_atoms_position(self.green)
	update_atoms_position(self.blue)
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
