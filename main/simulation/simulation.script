local state = require("main.state.state")

local sqrt, floor, ceil = math.sqrt, math.floor, math.ceil
local WIDTH = 1031
local HEIGHT = 580

local function round(x)
  return x >= 0 and floor(x + 0.5) or ceil(x - 0.5)
end

local function atom(x, y, c)
  return {x = x, y = y, vx = 0, vy = 0, color = c, instance = nil}
end

local function randomxy()
	local x = round(math.random() * WIDTH)
	if x == 0 then
		x = 1
	elseif x == WIDTH then
		x = WIDTH - 1
	end
	local y = round(math.random() * HEIGHT)
	if y == 0 then
		y = 1
	elseif y == HEIGHT then
		y = HEIGHT - 1
	end
	
	return x, y
end

local function create(number, color)
  local group = {}

  for i = 1, number do
    local x, y = randomxy()

    table.insert(group, atom(x, y, color))
  end

  return group
end

local function rule(atoms1, atoms2, g)  
	for i = 1, #atoms1 do
		local fx = 0
		local fy = 0
		local a, b
	
		for j = 1, #atoms2 do
			a = atoms1[i]
			b = atoms2[j]
			local dx = a.x - b.x
			local dy = a.y - b.y

			local pre_d = dx * dx + dy * dy
	
			if pre_d > 0 and pre_d < 6400 then -- 80
				local d = sqrt(pre_d)
				local F = g / d
		
				fx = fx + F * dx
				fy = fy + F * dy
			end
		end
	
		a.vx = (a.vx + fx) * 0.5
		a.vy = (a.vy + fy) * 0.5
		a.x = a.x + a.vx
		a.y = a.y + a.vy

		if a.x <= 0 or a.x >= WIDTH then
			a.vx = a.vx * -1
			
			if a.x <= 0 then
				a.x = 1
			elseif a.x >= WIDTH then
				a.x = WIDTH + 1
			end
		end
	
		if a.y <= 0 or a.y >= HEIGHT then
			a.vy = a.vy * -1

			if a.y <= 0 then
				a.y = 0
			elseif a.y >= HEIGHT then
				a.y = HEIGHT
			end
		end
	end
end

local function render_atoms(self, number, color)
	local group = create(number, hash(color))
	
	local component = "#atom_factory"
	for i = 1, #group do
		local atom = factory.create(component, vmath.vector3(group[i].x, group[i].y, 0))
		sprite.play_flipbook(atom, hash(color))
		group[i].instance = atom
	end

	self[color] = group
end

local function update_atoms_position(atom_group)
	local position = vmath.vector3(0, 0, 0)
	for i = 1, #atom_group do
		position.x = atom_group[i].x
		position.y = atom_group[i].y
		go.set_position(position, atom_group[i].instance)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	print('STARTt')

	self.red = {}
	self.green = {}
	self.blue = {}
	self.yellow = {}
	self.pink = {}

	if state.ATOMS_COUNT.RED > 0 then
		render_atoms(self, state.ATOMS_COUNT.RED, "red")
	end

	if state.ATOMS_COUNT.GREEN > 0 then
		render_atoms(self, state.ATOMS_COUNT.GREEN, "green")
	end

	if state.ATOMS_COUNT.BLUE > 0 then
		render_atoms(self, state.ATOMS_COUNT.BLUE, "blue")
	end

	if state.ATOMS_COUNT.YELLOW > 0 then
		render_atoms(self, state.ATOMS_COUNT.BLUE, "yellow")
	end

	if state.ATOMS_COUNT.PINK > 0 then
		render_atoms(self, state.ATOMS_COUNT.PINK, "pink")
	end
end

function final(self)
end

function update(self, dt)
	-- green rules
	if state.ATOMS_COUNT.GREEN > 0 then
		rule(self.green, self.green, state.ATOMS_RULES.GREEN_GREEN)
	end
	if state.ATOMS_COUNT.GREEN > 0 and state.ATOMS_COUNT.RED > 0 then
		rule(self.green, self.red, state.ATOMS_RULES.GREEN_RED)
	end
	if state.ATOMS_COUNT.GREEN > 0 and state.ATOMS_COUNT.BLUE > 0 then
		rule(self.green, self.blue, state.ATOMS_RULES.GREEN_BLUE)
	end
	if state.ATOMS_COUNT.GREEN > 0 and state.ATOMS_COUNT.YELLOW > 0 then
		rule(self.green, self.yellow, state.ATOMS_RULES.GREEN_YELLOW)
	end
	if state.ATOMS_COUNT.GREEN > 0 and state.ATOMS_COUNT.PINK > 0 then
		rule(self.green, self.pink, state.ATOMS_RULES.GREEN_PINK)
	end

	-- red rules
	if state.ATOMS_COUNT.RED > 0 then
		rule(self.red, self.red, state.ATOMS_RULES.RED_RED)
	end
	if state.ATOMS_COUNT.RED > 0 and state.ATOMS_COUNT.GREEN > 0 then
		rule(self.red, self.green, state.ATOMS_RULES.RED_GREEN)
	end
	if state.ATOMS_COUNT.RED > 0 and state.ATOMS_COUNT.BLUE > 0 then
		rule(self.red, self.blue, state.ATOMS_RULES.RED_BLUE)
	end
	if state.ATOMS_COUNT.RED > 0 and state.ATOMS_COUNT.YELLOW > 0 then
		rule(self.red, self.yellow, state.ATOMS_RULES.RED_YELLOW)
	end
	if state.ATOMS_COUNT.RED > 0 and state.ATOMS_COUNT.PINK > 0 then
		rule(self.red, self.pink, state.ATOMS_RULES.RED_PINK)
	end

	-- blue rules
	if state.ATOMS_COUNT.BLUE > 0 then
		rule(self.blue, self.blue, state.ATOMS_RULES.BLUE_BLUE)
	end
	if state.ATOMS_COUNT.BLUE > 0 and state.ATOMS_COUNT.GREEN > 0 then
		rule(self.blue, self.green, state.ATOMS_RULES.BLUE_GREEN)
	end
	if state.ATOMS_COUNT.BLUE > 0 and state.ATOMS_COUNT.RED > 0 then
		rule(self.blue, self.red, state.ATOMS_RULES.BLUE_RED)
	end
	if state.ATOMS_COUNT.BLUE > 0 and state.ATOMS_COUNT.YELLOW > 0 then
		rule(self.blue, self.yellow, state.ATOMS_RULES.BLUE_YELLOW)
	end
	if state.ATOMS_COUNT.BLUE > 0 and state.ATOMS_COUNT.PINK > 0 then
		rule(self.blue, self.pink, state.ATOMS_RULES.BLUE_PINK)
	end

	-- yellow rules
	if state.ATOMS_COUNT.YELLOW > 0 then
		rule(self.yellow, self.yellow, state.ATOMS_RULES.YELLOW_YELLOW)
	end
	if state.ATOMS_COUNT.YELLOW > 0 and state.ATOMS_COUNT.GREEN > 0 then
		rule(self.yellow, self.green, state.ATOMS_RULES.YELLOW_GREEN)
	end
	if state.ATOMS_COUNT.YELLOW > 0 and state.ATOMS_COUNT.RED > 0 then
		rule(self.yellow, self.red, state.ATOMS_RULES.YELLOW_RED)
	end
	if state.ATOMS_COUNT.YELLOW > 0 and state.ATOMS_COUNT.BLUE > 0 then
		rule(self.yellow, self.blue, state.ATOMS_RULES.YELLOW_BLUE)
	end
	if state.ATOMS_COUNT.YELLOW > 0 and state.ATOMS_COUNT.PINK > 0 then
		rule(self.yellow, self.pink, state.ATOMS_RULES.YELLOW_PINK)
	end

	-- pink rules
	if state.ATOMS_COUNT.PINK > 0 then
		rule(self.pink, self.pink, state.ATOMS_RULES.PINK_PINK)
	end
	if state.ATOMS_COUNT.PINK > 0 and state.ATOMS_COUNT.GREEN > 0 then
		rule(self.pink, self.green, state.ATOMS_RULES.PINK_GREEN)
	end
	if state.ATOMS_COUNT.PINK > 0 and state.ATOMS_COUNT.RED > 0 then
		rule(self.pink, self.red, state.ATOMS_RULES.PINK_RED)
	end
	if state.ATOMS_COUNT.PINK > 0 and state.ATOMS_COUNT.BLUE > 0 then
		rule(self.pink, self.blue, state.ATOMS_RULES.PINK_BLUE)
	end
	if state.ATOMS_COUNT.PINK > 0 and state.ATOMS_COUNT.YELLOW > 0 then
		rule(self.pink, self.yellow, state.ATOMS_RULES.PINK_YELLOW)
	end

	-- эталонные правила
	-- rule(self.green, self.green, -0.32)
	-- rule(self.green, self.red, -0.17)
	-- rule(self.green, self.blue, 0.34)
	-- rule(self.red, self.red, -0.1)
	-- rule(self.red, self.green, -0.34)
	-- rule(self.blue, self.blue, 0.15)
	-- rule(self.blue, self.green, -0.2)

	
	-- rule(self.red, self.red, 0.85)
	-- rule(self.red, self.blue, 0.07)
	-- rule(self.red, self.green, -0.12)
	-- rule(self.green, self.green, -0.3)
	-- rule(self.green, self.blue, 0.5)
	-- rule(self.green, self.red, -0.41)
	-- rule(self.blue, self.blue, 0.36)
	-- rule(self.blue, self.green, 0.97)
	-- rule(self.blue, self.red, -0.21)

	update_atoms_position(self.red)
	update_atoms_position(self.green)
	update_atoms_position(self.blue)
	update_atoms_position(self.yellow)
	update_atoms_position(self.pink)
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
