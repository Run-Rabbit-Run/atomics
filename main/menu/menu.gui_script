local druid = require("druid.druid")
local state = require("main.state.state")

function init_color_sliders(self)
	init_slider_color(self, "red")
	init_slider_color(self, "green")
	init_slider_color(self, "blue")
	init_slider_color(self, "yellow")
	init_slider_color(self, "pink")
end

function init_rule_sliders(self)
	init_slider_ratio(self, "green_red")
	init_slider_ratio(self, "green_green")
	init_slider_ratio(self, "green_blue")
	init_slider_ratio(self, "green_yellow")
	init_slider_ratio(self, "green_pink")

	init_slider_ratio(self, "blue_red")
	init_slider_ratio(self, "blue_green")
	init_slider_ratio(self, "blue_blue")
	init_slider_ratio(self, "blue_yellow")
	init_slider_ratio(self, "blue_pink")

	init_slider_ratio(self, "yellow_red")
	init_slider_ratio(self, "yellow_green")
	init_slider_ratio(self, "yellow_blue")
	init_slider_ratio(self, "yellow_yellow")
	init_slider_ratio(self, "yellow_pink")

	init_slider_ratio(self, "pink_red")
	init_slider_ratio(self, "pink_green")
	init_slider_ratio(self, "pink_blue")
	init_slider_ratio(self, "pink_yellow")
	init_slider_ratio(self, "pink_pink")

	init_slider_ratio(self, "red_red")
	init_slider_ratio(self, "red_green")
	init_slider_ratio(self, "red_blue")
	init_slider_ratio(self, "red_yellow")
	init_slider_ratio(self, "red_pink")
end

function init_druid_components(self)
	self.druid = druid.new(self)
	local slider = require("druid.extended.slider")
	druid.register("slider", slider)
	local input = require("druid.extended.input")
	druid.register("input", input)
end

function init_slider_color(self, color)
	local slider_pin_name = color .. "/slider_color_pin"
	local slider_text_name = color .. "/slider_color_text"
	local init_state = state.ATOMS_COUNT[string.upper(color)]
	self[color] = self.druid:new_slider(slider_pin_name, vmath.vector3(95, 0, 0), function(_, value)
		local new_value = math.ceil(value * 999)
		gui.set_text(gui.get_node(slider_text_name), new_value .. "")
		state.ATOMS_COUNT[string.upper(color)] = new_value
	end):set(init_state / 1000)
end

function init_slider_ratio(self, rule_colors)
	local slider_pin_name = rule_colors .. "/slider_color_pin"
	local slider_text_name = rule_colors .. "/slider_color_text"
	local init_state = (state.ATOMS_RULES[string.upper(rule_colors)] + 1) / 2
	self[rule_colors] = self.druid:new_slider(slider_pin_name, vmath.vector3(45, 0, 0), function(_, value)
		local new_value = string.format("%.2f", value * 2 - 1)
		gui.set_text(gui.get_node(slider_text_name), new_value)
		state.ATOMS_RULES[string.upper(rule_colors)] = tonumber(new_value)
	end):set(init_state)
end

function apply_button(self)
	msg.post("main:/loader", "show_simulation")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	init_druid_components(self)
	
	-- инициализируем слайдеры количеств цветов
	init_color_sliders(self)
	-- инициализируем слайдеры правил
	init_rule_sliders(self)

	self.druid:new_button("apply_button", apply_button)
end

function final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function on_reload(self)
end
