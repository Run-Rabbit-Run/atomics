local druid = require("druid.druid")
local state = require("main.state.state")

function init_count_buttons(self)
	self.red_count = self.druid:new_input("input_red_count_box", "input_red_count_text",  gui.KEYBOARD_TYPE_NUMBER_PAD)
	:set_allowed_characters("[%d,.]")
	:set_max_length(3)

	self.green_count = self.druid:new_input("input_green_count_box", "input_green_count_text",  gui.KEYBOARD_TYPE_NUMBER_PAD)
	:set_allowed_characters("[%d,.]")
	:set_max_length(3)

	self.blue_count = self.druid:new_input("input_blue_count_box", "input_blue_count_text",  gui.KEYBOARD_TYPE_NUMBER_PAD)
	:set_allowed_characters("[%d,.]")
	:set_max_length(3)
end

function apply_button(self)
	state.ATOMS_COUNT.RED = self.red_count:get_text()
	state.ATOMS_COUNT.GREEN = self.green_count:get_text()
	state.ATOMS_COUNT.BLUE = self.blue_count:get_text()
	msg.post("main:/loader", "show_simulation")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	local input = require("druid.extended.input")
	druid.register("input", input)
	self.druid = druid.new(self)
	local slider = require("druid.extended.slider")
	druid.register("slider", slider)

	init_count_buttons(self)

	self.red_sliderslider = self.druid:new_slider("slider_simple_pin", vmath.vector3(95, 0, 0), function(_, value)
		gui.set_text(gui.get_node("slider_simple_text"), math.ceil(value * 999) .. "")
	end)

	self.druid:new_button("apply_button", apply_button)
end

function final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end

function on_reload(self)
end
